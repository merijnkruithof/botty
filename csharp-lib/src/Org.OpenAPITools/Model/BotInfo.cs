/*
 * pegasus
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BotInfo
    /// </summary>
    [DataContract(Name = "BotInfo")]
    public partial class BotInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BotInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BotInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BotInfo" /> class.
        /// </summary>
        /// <param name="figure">figure (required).</param>
        /// <param name="gender">gender (required).</param>
        /// <param name="motto">motto (required).</param>
        /// <param name="ssoTicket">ssoTicket (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="username">username (required).</param>
        public BotInfo(string figure = default(string), string gender = default(string), string motto = default(string), string ssoTicket = default(string), int userId = default(int), string username = default(string))
        {
            // to ensure "figure" is required (not null)
            if (figure == null)
            {
                throw new ArgumentNullException("figure is a required property for BotInfo and cannot be null");
            }
            this.Figure = figure;
            // to ensure "gender" is required (not null)
            if (gender == null)
            {
                throw new ArgumentNullException("gender is a required property for BotInfo and cannot be null");
            }
            this.Gender = gender;
            // to ensure "motto" is required (not null)
            if (motto == null)
            {
                throw new ArgumentNullException("motto is a required property for BotInfo and cannot be null");
            }
            this.Motto = motto;
            // to ensure "ssoTicket" is required (not null)
            if (ssoTicket == null)
            {
                throw new ArgumentNullException("ssoTicket is a required property for BotInfo and cannot be null");
            }
            this.SsoTicket = ssoTicket;
            this.UserId = userId;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for BotInfo and cannot be null");
            }
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets Figure
        /// </summary>
        [DataMember(Name = "figure", IsRequired = true, EmitDefaultValue = true)]
        public string Figure { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", IsRequired = true, EmitDefaultValue = true)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets Motto
        /// </summary>
        [DataMember(Name = "motto", IsRequired = true, EmitDefaultValue = true)]
        public string Motto { get; set; }

        /// <summary>
        /// Gets or Sets SsoTicket
        /// </summary>
        [DataMember(Name = "sso_ticket", IsRequired = true, EmitDefaultValue = true)]
        public string SsoTicket { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BotInfo {\n");
            sb.Append("  Figure: ").Append(Figure).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Motto: ").Append(Motto).Append("\n");
            sb.Append("  SsoTicket: ").Append(SsoTicket).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (int) minimum
            if (this.UserId < (int)0)
            {
                yield return new ValidationResult("Invalid value for UserId, must be a value greater than or equal to 0.", new [] { "UserId" });
            }

            yield break;
        }
    }

}
